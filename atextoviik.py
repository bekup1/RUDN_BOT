import logging
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardButton, InlineKeyboardMarkup,
    WebAppInfo
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7395547960:AAGSpAKgd-9XWsXX42BTRCpJil5nR8YM2Tk"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üéì –§–∞–∫—É–ª—å—Ç–µ—Ç—ã", callback_data="faculties"),
        InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule")
    )
    builder.row(
        InlineKeyboardButton(text="üìù –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data="admission"),
        InlineKeyboardButton(text="üèõ –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")
    )
    builder.row(
        InlineKeyboardButton(text="üåê –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç", web_app=WebAppInfo(url="https://www.rudn.ru/")),
        InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")
    )
    return builder.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤
def faculties_keyboard():
    builder = InlineKeyboardBuilder()
    faculties = [
        "–ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç",
        "–§–∞–∫—É–ª—å—Ç–µ—Ç —Ñ–∏–∑–∏–∫–æ-–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫",
        "–§–∏–ª–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç",
        "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç",
        "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç",
        "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç"
    ]
    for faculty in faculties:
        builder.add(InlineKeyboardButton(text=faculty, callback_data=f"faculty_{faculty}"))
    builder.adjust(1)
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return builder.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def schedule_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="schedule_today"),
        InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data="schedule_tomorrow"),
        InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data="schedule_week")
    )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return builder.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
def admission_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç", callback_data="admission_bachelor"),
        InlineKeyboardButton(text="–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞", callback_data="admission_master")
    )
    builder.row(
        InlineKeyboardButton(text="–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞", callback_data="admission_phd"),
        InlineKeyboardButton(text="–î–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="admission_docs")
    )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –†–£–î–ù!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. "
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
    )
    await message.answer(welcome_text, reply_markup=main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º.\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:\n"
        "- üéì –§–∞–∫—É–ª—å—Ç–µ—Ç—ã - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞—Ö\n"
        "- üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π\n"
        "- üìù –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤\n"
        "- üèõ –ö–æ–Ω—Ç–∞–∫—Ç—ã - –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
        "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'."
    )
    await message.answer(help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_menu_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "faculties")
async def show_faculties(callback: CallbackQuery):
    await callback.message.edit_text(
        "üéì –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:",
        reply_markup=faculties_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("faculty_"))
async def show_faculty_info(callback: CallbackQuery):
    faculty_name = callback.data.split("_", 1)[1]
    await callback.message.edit_text(
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ: {faculty_name}\n\n"
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://www.rudn.ru/",
        reply_markup=faculties_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "schedule")
async def show_schedule_options(callback: CallbackQuery):
    await callback.message.edit_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=schedule_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("schedule_"))
async def show_schedule(callback: CallbackQuery):
    period = callback.data.split("_", 1)[1]
    periods = {
        "today": "—Å–µ–≥–æ–¥–Ω—è",
        "tomorrow": "–∑–∞–≤—Ç—Ä–∞",
        "week": "–Ω–∞ –Ω–µ–¥–µ–ª—é"
    }
    await callback.message.edit_text(
        f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π {periods.get(period, '')}:\n\n"
        "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏...\n"
        "–ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: https://www.rudn.ru/schedule",
        reply_markup=schedule_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "admission")
async def show_admission_options(callback: CallbackQuery):
    await callback.message.edit_text(
        "üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤:",
        reply_markup=admission_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("admission_"))
async def show_admission_info(callback: CallbackQuery):
    admission_type = callback.data.split("_", 1)[1]
    types_info = {
        "bachelor": "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç",
        "master": "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞",
        "phd": "–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞",
        "docs": "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"
    }
    await callback.message.edit_text(
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ ({types_info.get(admission_type, '')}):\n\n"
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://www.rudn.ru/admission",
        reply_markup=admission_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "contacts")
async def show_contacts(callback: CallbackQuery):
    contacts_text = (
        "üèõ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –†–£–î–ù:\n\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 787-38-03\n"
        "üìß Email: info@rudn.ru\n"
        "üìç –ê–¥—Ä–µ—Å: 117198, –ú–æ—Å–∫–≤–∞, —É–ª. –ú–∏–∫–ª—É—Ö–æ-–ú–∞–∫–ª–∞—è, 6\n\n"
        "üåê –°–∞–π—Ç: https://www.rudn.ru/\n"
        "üöá –ë–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ç—Ä–æ: –Æ–≥–æ-–ó–∞–ø–∞–¥–Ω–∞—è"
    )
    await callback.message.edit_text(
        contacts_text,
        reply_markup=main_menu_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "help")
async def show_help(callback: CallbackQuery):
    await cmd_help(callback.message)
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())